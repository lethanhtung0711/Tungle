package code;

public class Timkiemnhiphan {
	// Hàm tìm kiếm nhị phân sử dụng thuật toán lặp
	public static int binarySearch(int[] array, int target) {
        int left = 0; // Chỉ số bắt đầu
        int right = array.length - 1; // Chỉ số kết thúc

        while (left <= right) {
            int mid = left + (right - left) / 2; // Tính chỉ số giữa

            // Kiểm tra nếu phần tử giữa là phần tử cần tìm
            if (array[mid] == target) {
                return mid; // Trả về chỉ số nếu tìm thấy
            }

            // Nếu phần tử giữa nhỏ hơn phần tử cần tìm, tìm ở nửa phải
            if (array[mid] < target) {
                left = mid + 1;
            }
            // Nếu phần tử giữa lớn hơn phần tử cần tìm, tìm ở nửa trái
            else {
                right = mid - 1;
            }
        }
        return -1; // Trả về -1 nếu không tìm thấy
    }
	
	// Hàm tìm kiếm nhị phân sử dụng đệ quy
	public static int binarySearchRecursive(int[] array, int target, int left, int right) {
        // Kiểm tra điều kiện dừng
        if (left > right) {
            return -1; // Không tìm thấy
        }

        int mid = left + (right - left) / 2; // Tính chỉ số giữa

        // Kiểm tra nếu phần tử giữa là phần tử cần tìm
        if (array[mid] == target) {
            return mid; // Trả về chỉ số nếu tìm thấy
        }

        // Nếu phần tử giữa nhỏ hơn phần tử cần tìm, tìm ở nửa phải
        if (array[mid] < target) {
            return binarySearchRecursive(array, target, mid + 1, right);
        }
        // Nếu phần tử giữa lớn hơn phần tử cần tìm, tìm ở nửa trái
        else {
            return binarySearchRecursive(array, target, left, mid - 1);
        }
    }
	
	public static void main(String[] args) {
        // Mảng đã được sắp xếp
        int[] array = {}; 
        int target = 9238;
        long startTime;
        long endTime;
        long sum = 0;
        long start;
        long end;
        long sum1 = 0;
        int i;
        
        // Gọi hàm tìm kiếm nhị phân
        for(i=0;i<10000;++i) {
        	startTime = System.nanoTime();
        	binarySearch(array, target);
        	endTime = System.nanoTime();
        	sum += endTime - startTime; // Thời gian chạy tính bằng nano giây
        }
        
        // Kiểm tra kết quả tìm kiếm
        int index = binarySearch(array, target);
        if (index != -1) {
        	System.out.println("Lặp:");
            System.out.println("Phần tử " + target + " được tìm thấy tại chỉ số: " + index);
            System.out.println("Thời gian chạy là: " + (sum/10000) + " nanoseconds");
        } else {
        	System.out.println("Lặp:");
            System.out.println("Phần tử " + target + " không được tìm thấy trong mảng.");
        }
        
     // Gọi hàm tìm kiếm nhị phân
        for(i=0;i<10000;i++) {
        	start = System.nanoTime();
        	binarySearchRecursive(array, target, 0, array.length - 1);
        	end = System.nanoTime();
        	sum1 += end - start; // Thời gian chạy tính bằng nano giây
        }
        
        // Kiểm tra kết quả tìm kiếm
		int index1 = binarySearchRecursive(array, target, 0, array.length - 1);
        if (index1 != -1) {
        	System.out.println("Đệ quy:");
            System.out.println("Phần tử " + target + " được tìm thấy tại chỉ số: " + index1);
            System.out.println("Thời gian chạy là: " + (sum1/10000) + " nanoseconds");
        } else {
        	System.out.println("Đệ quy:");
            System.out.println("Phần tử " + target + " không được tìm thấy trong mảng.");
        }
    }
}
